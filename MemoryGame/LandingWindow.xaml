<Window
    x:Class="MemoryGame.LandingWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:MemoryGame"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    Title="Memory Game "
    Width="800"
    Height="730"
    Icon="pack://application:,,,/MemoryGame;component/Resources/Memory_logo.png"
    mc:Ignorable="d">
    <Window.Resources>
        <!--  Define some reusable styles  -->
        <Style TargetType="TextBlock">
            <Setter Property="Foreground" Value="#333333" />
            <Setter Property="FontSize" Value="14" />
            <Setter Property="Margin" Value="10" />
        </Style>
        <Style TargetType="Button">
            <Setter Property="Background" Value="#4CAF50" />
            <Setter Property="Foreground" Value="White" />
            <Setter Property="FontSize" Value="16" />
            <Setter Property="Padding" Value="10" />
            <Setter Property="Margin" Value="5" />
        </Style>
    </Window.Resources>
    <StackPanel Margin="20" Background="#F0F0F0">
        <Frame
            x:Name="LandingWindow1"
            Margin="10"
            HorizontalAlignment="Center"
            NavigationUIVisibility="Hidden" />

        <StackPanel Orientation="Horizontal">

            <Button
                Name="userButton"
                HorizontalAlignment="Left"
                VerticalAlignment="Center"
                Click="userButton_Click">
                <Image
                    Width="30"
                    Height="30"
                    Margin="10"
                    HorizontalAlignment="Left"
                    Source="/MemoryGame;component/Resources/user_logo.png" />
            </Button>
            <TextBlock
                Margin="190,0,0,0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                FontSize="30"
                FontWeight="Black"
                Text="Memory Game" />

        </StackPanel>
        <Button
            x:Name="StartGameButton"
            HorizontalAlignment="Center"
            VerticalAlignment="Bottom"
            Click="Button_Start_Game_Click"
            Content="Start Game" />

        <!--  Description of the program  -->
        <TextBlock TextAlignment="Justify" TextWrapping="Wrap">
            <Run FontSize="16" FontWeight="Bold">Project Description:</Run>
            <LineBreak />
            <LineBreak />
            <Run FontWeight="Bold">Image Paths:</Run>
            <Italic>An array (imagePaths) containing paths to different images for the game tiles and a path (imageBackPath) for the back of the tiles.</Italic>
            <LineBreak />
            <LineBreak />
            <Run FontWeight="Bold">Grid of Buttons:</Run>
            <Italic>A 3x4 grid of Button elements (buttons) representing the game board. Each button initially displays the back image.</Italic>
            <LineBreak />
            <LineBreak />
            <Run FontWeight="Bold">Game Logic:</Run>
            <Italic>Buttons are dynamically created and placed within a Grid (GameGrid1) using the CreateButtons() method. The images (imagePaths) are shuffled to randomize their placement on the buttons. Clicking a button (Button_Click event) flips it to reveal its associated image. The game checks for matches (CheckForMatch() method) when two buttons are flipped. If images match, they remain face up. If not, they flip back after a brief delay.</Italic>
            <LineBreak />
            <LineBreak />
            <Run FontWeight="Bold">Restart Functionality:</Run>
            <Italic>There's a button (Button_Click_Restart_Game) to reset the game by recreating the buttons with shuffled images.</Italic>
            <LineBreak />
            <LineBreak />
            <Run FontWeight="Bold">Techniques Used:</Run>
            <Italic>Utilizes asynchronous programming (async and await) for delaying and flipping back non-matching tiles. Makes use of XAML-like construction in code to set button properties such as content (images) and event handling.</Italic>
            <LineBreak />
            <LineBreak />
            <Run FontWeight="Bold">Overall:</Run>
            <Italic>This project demonstrates creating a functional memory game UI in WPF, combining code-behind logic with XAML style element creation and management.</Italic>
        </TextBlock>
        <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
            <Image
                Width="50"
                Height="50"
                Margin="10"
                HorizontalAlignment="Center"
                Source="/MemoryGame;component/Resources/Logo_C_Sharp.png" />
            <Image
                Width="50"
                Height="50"
                Margin="10"
                HorizontalAlignment="Center"
                Source="/MemoryGame;component/Resources/WPF_logo.png" />
            <Image
                Width="50"
                Height="50"
                Margin="10"
                HorizontalAlignment="Center"
                Source="/MemoryGame;component/Resources/XAML_logo.jpg" />
        </StackPanel>

    </StackPanel>
</Window>
